
				// configuration
								
				DEFp	FPGA_VER		4'd1
				DEFp	FW_ID			0x5000

				DEFp	ADC_BITS		14
				DEFp	NUM_CMDS		36
				DEFp	DEFAULT_NSYNC	2			// bits in synchronizers
				
				DEFh	USE_CPU_MULT	1
				DEFh	USE_MIX_DDS		1
				DEFh	USE_GEN			1
				DEFh	USE_HBEAT		0
				DEFh	USE_LOGGER		0
				DEFh	USE_CPU_CTR		1
				DEFh	USE_DEBUG		1
				
				DEFh	USE_VIVADO		1
				DEFh	ARTIX_7			1
				DEFh	QUICK_BUILD		0
				DEFh	SPI_PUMP_CHECK	0
				DEFh	STACK_CHECK		0
				DEFh	SND_SEQ_CHECK	0
				DEFh    SND_TIMING_CK   0
				DEFh	SPI_32			1

			#if QUICK_BUILD
				DEFp	GPS_CHANS		0
				DEFp	RX_CHANS		4
				DEFp	WF_CHANS		4
				DEFp	FPGA_ID			4'd8
				DEFh	USE_RX_SEQ		0		// fixme: tmp due to out-of-brams
			#else
				DEFp	GPS_CHANS		12
				DEFp	RX_CHANS		4
				DEFp	WF_CHANS		4
				DEFp	FPGA_ID			4'd3
				DEFh	USE_RX_SEQ		0		// fixme: tmp due to out-of-brams
			#endif


; ============================================================================

				// rx
				DEFh	SND_12000		1
				DEFh	SND_9600   		0
				
			#if SND_12000
			    DEFp    SND_RATE        12000
				DEFp	RX1_DECIM		505			// to get near 12000 for integer WSPR sample rate
				DEFp	RX2_DECIM		11			// 505*11 = 5555, 66.6666M/5555 = 12001.188 Hz
			    // 1/(12000/NRX_SAMPS) = interrupt every 7.08 ms / 141 Hz
			#endif

			#if SND_9600
			    DEFp    SND_RATE        9600
				DEFp	RX1_DECIM		496			// to get near 9600 for s4285 decoder sample rate
				DEFp	RX2_DECIM		14			// 496*14 = 6944, 66.6666M/6944 = 9600.605 Hz
			    // 1/(9600/NRX_SAMPS) = interrupt every 8.85 ms / 113 Hz
			#endif

                DEFp    NRX_BUFS        8           // given 8k x 16b audio buffer in receiver.v

				DEFp	NRX_SAMPS		84
				DEFp	NRX_SAMPS_RPT	8

				DEFp	NRX_SAMPS_LOOP	NRX_SAMPS * RX_CHANS / NRX_SAMPS_RPT

				DEFh	USE_RX_CIC24	0

			#if USE_RX_CIC24
				DEFp	RX1_BITS		24
				DEFp	RX2_BITS		23
			#else
				DEFp	RX1_BITS		22
				DEFp	RX2_BITS		18
				//DEFp	RX1_BITS		16
				//DEFp	RX2_BITS		16
			#endif
				DEFp	RXO_BITS		24

				DEFp	RX1_STAGES		3
				DEFp	RX2_STAGES		5
				
				
				// waterfall
				DEFp	MAX_ZOOM		14

				//DEFp	NWF_SAMPS		512			// causes SPI_PUMP_CHECK problem
				DEFp	NWF_SAMPS		482			// 8192/17 = 481.9
				DEFp	NWF_SAMPS_RPT	48
				//DEFp	NWF_SAMPS_LOOP	NWF_SAMPS / NWF_SAMPS_RPT
				DEFp	NWF_SAMPS_LOOP	10
				DEFp	NWF_SAMPS_REM	2
				
				DEFh	USE_WF_1CIC		1
				DEFh	USE_WF_PRUNE	1
				DEFh	USE_WF_CIC24	1
				DEFh	USE_WF_MEM24	0
				DEFh	USE_WF_NEW		0

				DEFp	WF1_STAGES		5
				DEFp	WF2_STAGES		5
				
			#if USE_WF_CIC24
				DEFp	WF1_BITS		24
				DEFp	WF2_BITS		24
			#else
				DEFp	WF1_BITS		16
				DEFp	WF2_BITS		16
			#endif
			
			#if USE_WF_MEM24
				DEFp	WFO_BITS		24
			#else
				DEFp	WFO_BITS		16
			#endif
			
			#if USE_WF_1CIC
				DEFp	WF_1CIC_MAXD	8192
				DEFp	WF_2CIC_MAXD	0			// to keep Vivado happy
			#else
				DEFp	WF_2CIC_MAXD	128			// 8192 = 128 * 64
				DEFp	WF_2CIC_POW2	7
				DEFp	WF_1CIC_MAXD	0			// to keep Vivado happy
			#endif
			
			
				// gps
				DEFp	MAX_NAV_BITS	64
				DEFp	GPS_SAMPS		256


				// sampling
				DEFp	NADC_SAMPS		512

; ============================================================================

// NB: [10:0] (0x400 max) because [11] is used for further decoding

				// read reg (rdReg & op[10:0], one hot)
				// these 3 must be in these bit positions: see gps.v
				DEFb	GET_CHAN_IQ		0x001
				DEFb	GET_SRQ			0x002
				DEFb	GET_SNAPSHOT	0x004
				
				DEFb	HOST_RX			0x008
				DEFb	GET_RX_SRQ		0x010
				DEFb	GET_CPU_CTR0	0x020
				DEFb	GET_CPU_CTR1	0x040
				DEFb	GET_CPU_CTR2	0x080
				DEFb	GET_CPU_CTR3	0x100
				DEFb	GET_STATUS		0x200
	
				// read reg (rdReg2 & op[10:0], one hot)

				// write reg (wrReg & op[10:0], one hot)
				DEFb	HOST_TX			0x001
				DEFb	SET_MASK		0x002
				DEFb	SET_CHAN		0x004
				DEFb	SET_CA_NCO		0x008
				DEFb	SET_LO_NCO		0x010
				DEFb	SET_SV			0x020
				DEFb	SET_PAUSE		0x040
				
				// write reg (wrReg2 & op[10:0], one hot)
				DEFb	SET_CTRL		0x001
				DEFb	SET_RX_CHAN		0x002
				DEFb	SET_RX_FREQ		0x004
				DEFb	SET_RX_NSAMPS	0x008
				DEFb	SET_GEN			0x010
				DEFb	SET_GEN_ATTN	0x020
				DEFb	SET_WF_FREQ		0x040
				DEFb	SET_WF_DECIM	0x080
				DEFb	SET_WF_CHAN		0x100
				DEFb	WF_SAMPLER_RST	0x200
	
				// events (wrEvt & op[10:0], one hot)
				DEFb	HOST_RST		0x001
				DEFb	HOST_RDY		0x002
				DEFb	GPS_SAMPLER_RST	0x004
				DEFb	GET_GPS_SAMPLES	0x008	// data transfer goes directly to SPI BRAM
				DEFb	GET_MEMORY		0x010   // causes ecpu data memory (with TOS pointer++) to SPI BRAM transfer
				DEFb	GET_LOG			0x020
				DEFb	PUT_LOG			0x040
				DEFb	LOG_RST			0x080
				DEFb	CPU_CTR_CLR		0x100
				DEFb	CPU_CTR_ENA		0x200
				DEFb	CPU_CTR_DIS		0x400

				// events (wrEvt2 & op[10:0], one hot)
				DEFb	GET_RX_SAMP		0x001	// data transfer goes directly to SPI BRAM
				DEFb	RX_BUFFER_RST	0x002
				DEFb	RX_GET_BUF_CTR	0x004	// data transfer goes directly to SPI BRAM
				DEFb	SET_WF_CONTIN	0x008
				DEFb	GET_WF_SAMP_I	0x010	// data transfer goes directly to SPI BRAM
				DEFb	GET_WF_SAMP_Q	0x020	// "
				DEFb	CLR_RX_OVFL		0x040
				DEFb	FREEZE_TOS		0x080


				// WF_SAMPLER_RST
				DEFb	WF_SAMP_RD_RST	0x1
				DEFb	WF_SAMP_WR_RST	0x2
				DEFb	WF_SAMP_CONTIN	0x4
				DEFb	WF_SAMP_SYNC	0x8

				// GET_STATUS
				DEFp	STAT_FPGA_ID	0x000f
				DEFp	STAT_CLOCK_ID	0x00f0
				DEFp	STAT_FPGA_VER	0x0f00
				DEFp	STAT_FW_ID		0x7000
				DEFb	STAT_OVFL		0x8000

				// SET_CTRL
				DEFb	CTRL_OSC_EN		0x0100
				DEFb	CTRL_EEPROM_WP	0x0200
				DEFb	CTRL_USE_GEN	0x0400
				DEFb	CTRL_TEST_MODE	0x0800
				DEFb	CTRL_INTERRUPT	0x1000
				DEFh	HEARTBEAT_IND	CTRL_EEPROM_WP
				DEFb	CTRL_UNUSED_OUT	0x8000
